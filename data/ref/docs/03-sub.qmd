## preamble

### setup

```{r load-libs, message=FALSE, warning=FALSE}
library(dplyr)
library(tidyr)
library(irlba)
library(scran)
library(scater)
library(igraph)
library(AUCell)
library(harmony)
library(ggplot2)
library(tidytext)
library(patchwork)
library(BiocParallel)
bp <- MulticoreParam(th <- 20)
source("utils.R")
set.seed(241128)
```

### loading

```{r load-data}
sce <- readRDS("../outs/sce-lv1.rds")
ids <- list(
    epi="epi",
    str="fib|EC|SMC",
    imm="BC|PC|TC|mye|mast")
idx <- lapply(ids, grep, sce$lv1)
lys <- lapply(idx, \(.) sce[, .])
names(sub) <- sub <- names(lys)
sapply(lys, \(.) table(.$sid))
sapply(lys, ncol)
```

```{r echo=FALSE}
stopifnot(sum(sapply(lys, ncol)) == sum(!is.na(sce$lv1)))
```

## selection

```{r sel}
sel <- lapply(lys, \(sce) {
    tbl <- modelGeneVar(sce, block=sce$pid, BPPARAM=bp)
    sel <- lapply(tbl$per.block, getTopHVGs, n=2e3)
    sel <- sapply(sel, \(.) rownames(sce) %in% .)
    rownames(sce)[rowSums(sel) > 1]
})
sapply(sel, length)
```

## integration

```{r int}
lys <- mapply(sce=lys, sel=sel, \(sce, sel) {
    reducedDim(sce, "PCA") <- RunHarmony(
        meta_data=sce$run, verbose=FALSE,
        prcomp_irlba(t(logcounts(sce[sel, ])), 30)$x)
    runUMAP(sce, dimred="PCA", BPPARAM=bp)
})
```

## clustering

```{r clu}
lys <- lapply(sub, \(.) {
    g <- buildSNNGraph(obj <- lys[[.]], use.dimred="PCA", type="jaccard", k=20, BPPARAM=bp)
    k <- cluster_leiden(g, "modularity", resolution=switch(., epi=2, str=1.5, imm=1.2))
    obj$kid <- factor(k <- k$membership, labels=letters[seq_along(unique(k))]); obj
})
lapply(lys, \(.) table(.$kid))
sapply(lys, \(.) nlevels(.$kid))
```

## plotting

### compositions

::: {.panel-tabset}

```{r plt-fq-one, results="asis", fig.width=4, fig.height=2}
for (. in names(lys)) {
    p <- .plt_fq(lys[[.]], x="kid", y="sid", id=., pal=.pal)
    cat("#### ", ., "\n"); print(p); cat("\n\n")
}
```

:::

### regression

::: {.panel-tabset}

```{r pcr-kid, results="asis", fig.width=6, fig.height=3}
ids <- c("sum", "run", "sid", "kid")
pal <- c("magenta", "gold", "cyan", "blue")
pcr <- lapply(lys, .pcr, ids)
for (. in sub) {
    p <- .plt_pcr(pcr[[.]]) + scale_color_manual(values=pal)
    cat("#### ", ., "\n"); print(p); cat("\n\n")
}
```

:::

### reduction

::: {.panel-tabset}

```{r plt-map-one, results="asis", fig.width=15, fig.height=5}
ids <- c("run", "sid", "kid")
for (. in sub) {
    p <- .plt_dr(lys[[.]], ids) & ggtitle(.lab(., ncol(lys[[.]])))
    cat("#### ", ., "\n"); print(p); cat("\n\n")
}
```

:::

### contingency

```{r tbl, fig.width=12, fig.height=2.5}
lapply(sub, \(.) {
    ns <- table(lys[[.]]$lv1, lys[[.]]$kid)
    fq <- prop.table(ns, 2)
    invisible({
        hm <- pheatmap::pheatmap(fq, silent=TRUE,
            scale="none", angle_col=0, fontsize=9,
            cellwidth=10, cellheight=10, main=.,
            treeheight_row=5, treeheight_col=5)
        ggplotify::as.ggplot(hm)
    })
}) |> wrap_plots(nrow=1)
```

### markers

```{r mgs-de}
mgs <- lapply(lys, \(sub) findMarkers(
    sub, groups=sub$kid, block=sub$pid, 
    direction="up", add.summary=TRUE, BPPARAM=bp))
```

```{r mgs-top}
# top-20 markers
lapply(sub, \(.) sapply(mgs[[.]], \(df) head(rownames(df)[order(-df$summary.logFC)], 20)))
```

::: {.panel-tabset}

```{r mgs-hm, results="asis", fig.width=15, fig.height=4}
ps <- lapply(sub, \(.) {
    top <- unique(unlist(lapply(mgs[[.]], \(df) rownames(df)[df$Top <= 3])))
    if (length(top) > 150) top <- sample(top, 150)
    mtx <- logcounts(lys[[.]])[top, ]
    .plt_hm(lys[[.]], mtx, by="kid", id=.) + 
        coord_flip(expand=FALSE) + theme(
            axis.text.y=element_text(size=12), 
            axis.text.x=element_text(size=8, angle=90, hjust=1, vjust=0.5))
})
for (. in sub) { cat("#### ", ., "\n"); print(ps[[.]]); cat("\n\n") }
```

:::

## downstreams

### canonical

```{r mgs-lys}
# Human Protein Atlas - single cell - tissue cell type - colon
b <- "%3BVery%20high%2CHigh%2CModerate&columns=g,gd&compress=no&format=json"
a <- "https://www.proteinatlas.org/api/search_download.php?search=ce_enriched%3Acolon%3B"
url <- c(
    TC="T-cells",
    mac="macrophages",
    fib="fibroblasts",
    PC="plasma%20cells",
    mast="mast%20cells",
    neutro="neutrophils",
    EC="endothelial%20cells",
    entero="colon%20enterocytes",
    SMC="smooth%20muscle%20cells",
    glia="enteric%20glia%20cells",
    endocrine="colon%20enteroendocrine%20cells")
mgs <- lapply(url, \(.) {
    . <- paste0(a, ., b)
    tf <- tempfile(fileext=".json")
    download.file(., destfile=tf, mode="wb")
    gs <- jsonlite::fromJSON(tf)$Gene
    intersect(gs, rownames(sce))
})
sapply(mgs, length)
length(unique(unlist(mgs)))
```

```{r mgs-run}
auc <- lapply(sub, \(.) {
    mtx <- logcounts(lys[[.]])
    rnk <- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)
    AUCell_calcAUC(mgs, rnk, nCores=th, verbose=FALSE)
})
```

```{r mgs-plt, fig.width=12, fig.height=3}
ps <- lapply(sub, \(.) .plt_hm(lys[[.]], auc[[.]], by=c("kid", "pid"), id=.))
wrap_plots(ps, nrow=1) + plot_layout(guides="collect")
```

::: {.panel-tabset}

```{r mgs-qlt, results="asis", fig.width=12, fig.height=3}
mgs_lys <- list(
    epi=c("entero", "endocrine"),
    imm=c("TC", "mac", "PC", "mast"), 
    str=c("EC", "SMC", "fib", "glia", "neutro"))
for (. in sub) for (.. in mgs_lys[[.]]) {
    mtx <- logcounts(lys[[.]])[mgs[[..]], ]
    if ((n <- nrow(mtx)) > 100) mtx <- mtx[sample(n, 100), ]
    p <- .plt_hm(lys[[.]], mtx, by=c("kid", "pid")) +
        ggtitle(bquote(bold(.(.))~"â€”"~.(..))) +
        coord_flip(expand=FALSE) + theme(
            axis.text.x=element_text(angle=90, hjust=1, vjust=0.5))
    cat("#### ", .., "\n"); print(p); cat("\n\n")
}
```

:::

### signatures

```{r sig-lys}
# collect list of signatures from MSigDB
sig <- list(YAP="WP_HIPPOYAP_SIGNALING")
# hallmark gene sets (H)
ids <- c(
    apoptosis="APOPTOSIS",
    angiogenesis="ANGIOGENESIS",
    EMT="EPITHELIAL_MESENCHYMAL_TRANSITION",
    FA_metabolism="FATTY_ACID_METABOLISM",
    glycolysis="GLYCOLYSIS",
    hypoxia="HYPOXIA",
    infl_resp="INFLAMMATORY_RESPONSE",
    IFNa="INTERFERON_ALPHA_RESPONSE",
    IFNg="INTERFERON_GAMMA_RESPONSE",
    myogenesis="MYOGENESIS",
    STAT3="IL6_JAK_STAT3_SIGNALING",
    TNFa="TNFA_SIGNALING_VIA_NFKB",
    WNT="WNT_BETA_CATENIN_SIGNALING")
for (. in names(ids)) sig[[.]] <- paste0("HALLMARK_", ids[[.]])
# Hallmarks of transcriptional intratumour 
# heterogeneity across a thousand tumours
# Gavish et al., 2023 (DOI: 10.1038/s41586-023-06130-4)
ids <- c(
    IG="36_IG",
    MYC="20_MYC",
    stress="5_STRESS",
    respiration="21_RESPIRATION",
    epi_senescence="19_EPITHELIAL_SENESCENCE")
pre <- "GAVISH_3CA_MALIGNANT_METAPROGRAM_"
for (. in names(ids)) sig[[.]] <- paste0(pre, ids[.])
pre <- "GAVISH_3CA_METAPROGRAM_FIBROBLASTS_CAF_"
for (. in seq_len(10)) sig[[paste0("CAF_", .)]] <- paste0(pre, .)
# A human cell atlas of fetal gene expression
# Cao et al., 2020 (DOI: 10.1126/science.aba7721)
ids <- c(
    epithelial="INTESTINAL_EPITHELIAL_CELLS",
    endo.lympathic="LYMPHATIC_ENDOTHELIAL_CELLS",
    endo.vascular="VASCULAR_ENDOTHELIAL_CELLS",
    lymphoid="LYMPHOID_CELLS",
    mesothelial="MESOTHELIAL_CELLS",
    myeloid="MYELOID_CELLS",
    smooth.muscle="SMOOTH_MUSCLE_CELLS",
    stromal="STROMAL_CELLS")
pre <- "DESCARTES_FETAL_INTESTINE_"
for (. in names(ids)) sig[[paste0("fetal_", .)]] <- paste0(pre, ids[.])
length(sig)
```

```{r sig-get}
set <- lapply(sig, \(.) {
    tf <- tempfile(fileext=".json")
    url <- sprintf("https://www.gsea-msigdb.org/gsea/msigdb/human/download_geneset.jsp?geneSetName=%s&fileType=json", .)
    download.file(url, destfile=tf, mode="wb")
    gs <- jsonlite::fromJSON(tf)[[1]]$geneSymbols
    intersect(gs, rownames(sce))
})
sapply(set, length)
```

```{r sig-run}
auc <- lapply(sub, \(.) {
    mtx <- logcounts(lys[[.]])
    rnk <- AUCell_buildRankings(mtx, BPPARAM=bp, plotStats=FALSE, verbose=FALSE)
    AUCell_calcAUC(set, rnk, nCores=th, verbose=FALSE)
})
```

```{r sig-plt, fig.width=12, fig.height=6}
ps <- lapply(sub, \(.) .plt_hm(lys[[.]], auc[[.]], by=c("kid", "pid"), id=.))
wrap_plots(ps, nrow=1) + plot_layout(guides="collect")
```

### selected

```{r fig.width=12, fig.height=6}
mgs <- list(
    epi=list(
        endocrine=c("CHGA", "SST"),
        tuft=c("DCLK1", "TSLP", "CDHR2", "ESPN"),
        paneth=c("LYZ", "DEFA5", "DEFA6", "DLL4"),
        entero=c("ALPI", "FABP1", "SLC26A2", "CA1"),
        krt=grep("^KRT", rownames(sce), value=TRUE),
        neuron=c("PHOX2B", "CHRNA3", "HAND2", "TBX3"),
        goblet=c("MUC2", "TFF3", "SATB2", "KLK1", "SPINK4"),
        stem=c("OLFM4", "LGR5", "KCNE3", "KCNQ1", "PROM1", "ASCL2", "AXIN2"),
        other=c("REG1A", "REG1B", "REG3A", "REG3G", "REG4", "CEACAM5", "CEACAM6")
    ),
    imm=list(
        mast=c("KIT", "IL1RL1"),
        DC=c("LAMP3", "CLEC10A", "ITGAX"),
        mono=c("VCAN"),
        macro=c("CD14", "TLR4", "CD68", "APOE", "APOC1", "CTSD", "MMP9"),
        Th=c("CD3D", "CD2", "CD28", "CD4", "ITGAL", "CD40LG", "TIGIT", "GATA3"),
        Tc=c("CD8A", "NKG7", "EOMES", "GZMK", "CXCR6", "CCL5"),
        PC=c("IGKC", "IGHA1", "IGHA2", "IGHG1", "IGHG3", "IGHM", "MZB1", "XBP1", "IRF4"),
        BC=c("CD79A", "CD40", "CIITA", "CD83", "CD19", "MS4A1", "CD69", "SELL", "IGHD")
    ),
    str=list(
        SMC=c("MYL9", "MYLK", "MYH11", "CCN1"),
        EC=c("PECAM1", "CAV1", "VWF", "CD34", "CD93", "EGFL7", "KLF2"),
        BEC=c("CDH5", "FLT1", "CLDN5"),
        LEC=c("LYVE1", "PROX1", "CCL21", "PDPN"),
        fib=c("COL1A1", "COL6A1", "COL3A1", "COL6A2", "COL6A3",
            "ADAMDEC1", "FN1", "F3", "C3", "MMP1", "MMP3", "C1S", "CLU"),
        CAF=c("COL1A2", "FAP", "PDGFRA", "PDGFB", "MMP2", "DCN", "ACTA2", "TAGLN", "PDGFA")
    )
)
nan <- setdiff(unlist(mgs), rownames(sce))
if (length(nan)) {print(nan); stop()}
lapply(sub, \(.) {
    df <- data.frame(
        g=unlist(mgs[[.]]),
        k=rep.int(names(mgs[[.]]), sapply(mgs[[.]], length)))
    mtx <- logcounts(lys[[.]])[unlist(mgs[[.]]), ]
    p <- .plt_hm(lys[[.]], mtx, by=c("kid", "pid"), id=.) + 
        ggtitle(.lab(., length(unlist(mgs[[.]])))) +
        labs(fill="z-scaled\nexpr.") 
    q <- ggplot(df, aes(0, g, fill=k)) + 
        geom_tile() + labs(fill=.) + coord_equal(expand=FALSE) +
        theme_void() + theme(legend.key.size=unit(0.5, "lines")) +
        scale_fill_manual(values=hcl.colors(length(unique(df$k)), "Spectral"))
    (p | q) + 
        plot_layout(guides="collect") &
        scale_y_discrete(limits=p$scales$scales[[2]]$limits)
}) |> wrap_plots(nrow=1,) + plot_layout(nrow=1)
```

## appendix

### saving

```{r save-data}
for (. in sub) saveRDS(lys[[.]], sprintf("../outs/sub-%s.rds", .))
```

::: {.callout-note icon=false, collapse=true}

### session

```{r session-info}
#| code-fold: false
sessionInfo()
```

:::